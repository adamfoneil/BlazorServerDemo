@page "/WorkItem"
@inject Data Data

<ErrorMessage @ref="error"/>

<div class="alert alert-info">
    @if (WorkItemRecord.Number == 0)
    {
        <span>New work item</span>
    }
    else
    {
        <span>@WorkItemRecord.Number</span>
    }
</div>

<EditForm Model="WorkItemRecord" OnSubmit="WorkItemOnSubmit">
    <div class="row">    
        <label>Folder:</label>
        <RadzenDropDown TValue="int" @bind-Value="WorkItemRecord.FolderId" Data="Folders" TextProperty="Value" ValueProperty="Key"/>    
    </div>

    <div class="row">
        <label>Title:</label>
        <RadzenTextBox @bind-Value="WorkItemRecord.Title"/>
    </div>

    <div class="row">
        <label>Iteration:</label>
        <RadzenDropDown TValue="int" @bind-Value="WorkItemRecord.Iteration" Data="Iterations" TextProperty="Value" ValueProperty="Key"/>        
    </div>

    <div class="row">
        <label>Labels:</label>        
        <LabelSelector Orientation="Orientation.Horizontal" Labels="AllLabels" @bind-Value="WorkItemRecord.SelectedLabels" @ref="labelSelector"/>        
    </div>

    <RadzenButton ButtonType="ButtonType.Submit" Text="Save Work Item"/>

    <RadzenButton Click="NewWorkItem" Text="New Work Item"/>
</EditForm>

@code {        
    ErrorMessage error;
    int WorkspaceId;
    Models.WorkItem WorkItemRecord = new Models.WorkItem();
    IEnumerable<KeyValuePair<int, string>> Folders;
    IEnumerable<KeyValuePair<int, string>> Iterations;
    IEnumerable<Label> AllLabels = Enumerable.Empty<Label>();    
    LabelSelector labelSelector;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        WorkspaceId = await Data.GetWorkspaceIdAsync();
        WorkItemRecord.WorkspaceId = WorkspaceId;
        Folders = await Data.QuerySelectListAsync(() => new FolderSelect(WorkspaceId * -1));
        Iterations = await Data.GetIterationsAsync();
        AllLabels = await Data.QueryAsync(new MyLabels() { WorkspaceId = WorkspaceId, IsActive = true });
    }

    async Task WorkItemOnSubmit() => await Data.SaveAsync(WorkItemRecord, error);

    void NewWorkItem()
    {        
        labelSelector.ClearLabels(); // prevents redundant items in checkbox item list
        WorkItemRecord = new Models.WorkItem() { WorkspaceId = WorkspaceId };
    }
}
