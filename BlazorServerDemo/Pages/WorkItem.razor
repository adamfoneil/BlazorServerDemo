@page "/WorkItem"
@inject Data Data

<ErrorMessage @ref="error"/>

<EditForm Model="WorkItemRecord" OnSubmit="WorkItemOnSubmit">
    <div class="row">    
        <label>Folder:</label>
        <RadzenDropDown TValue="int" @bind-Value="WorkItemRecord.FolderId" Data="Folders" TextProperty="Value" ValueProperty="Key"/>    
    </div>

    <div class="row">
        <label>Title:</label>
        <RadzenTextBox @bind-Value="WorkItemRecord.Title"/>
    </div>

    <div class="row">
        <label>Iteration:</label>
        <RadzenDropDown TValue="int" @bind-Value="WorkItemRecord.Iteration" Data="Iterations" TextProperty="Value" ValueProperty="Key"/>        
    </div>

    <div class="row">
        <label>Labels:</label>
        <RadzenDropDown TValue="int" Data="Labels" TextProperty="Value" ValueProperty="Key" Change="@(value => LabelOnChange(value))"/>
        <RadzenCard>
            @foreach (var lbl in SelectedLabels)
            {
                <span class="badge" style="background-color:@lbl.BackColor;color:@lbl.TextColor">
                    @lbl.Name                    
                    <a class="dismiss" @onclick="(args) => RemoveLabel(args, lbl.Id)">🗙</a>
                </span>
            }
        </RadzenCard>
    </div>

    <div class="row">
        <label>Labels:</label>
        <RadzenCheckBoxList TValue="int" Orientation="Orientation.Horizontal" Change="@(value => SelectedLabelChange(value))" @ref="LabelOptions">
            <Items>                                     
                @foreach (var lbl in AllLabels)
                {                                        
                    <RadzenCheckBoxListItem Value="lbl.Id" Text="@lbl.Name" @ref="AddCheckboxRef"/>                    
                }
            </Items>
        </RadzenCheckBoxList>
    </div>
</EditForm>


@code {        
    ErrorMessage error;
    int WorkspaceId;
    Models.WorkItem WorkItemRecord = new Models.WorkItem();
    IEnumerable<KeyValuePair<int, string>> Folders;
    IEnumerable<KeyValuePair<int, string>> Iterations;
    IEnumerable<KeyValuePair<int, string>> Labels;
    HashSet<Label> SelectedLabels = new HashSet<Label>();
    IEnumerable<Label> AllLabels = Enumerable.Empty<Label>();
    RadzenCheckBoxList<int> LabelOptions;
    List<RadzenCheckBoxListItem<int>> LabelCheckboxItems = new List<RadzenCheckBoxListItem<int>>();

    // thanks to https://stackoverflow.com/a/60083369/2023653
    RadzenCheckBoxListItem<int> AddCheckboxRef { set { LabelCheckboxItems.Add(value); } }

    async Task WorkItemOnSubmit() => await Data.SaveAsync(WorkItemRecord, error);

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        WorkspaceId = await Data.GetWorkspaceIdAsync();
        Folders = await Data.QuerySelectListAsync<FolderSelect>(q => q.WorkspaceId = WorkspaceId);
        Iterations = await Data.GetIterationsAsync();
        Labels = await Data.QuerySelectListAsync<LabelSelect>(q => q.WorkspaceId = WorkspaceId);
        AllLabels = await Data.QueryAsync(new MyLabels() { WorkspaceId = WorkspaceId, IsActive = true });
    }

    async Task LabelOnChange(object value)
    {
        int labelId = (int)value;
        var lbl = await Data.GetAsync<Label>(labelId);
        if (lbl != null) SelectedLabels.Add(lbl);
    }

    void RemoveLabel(MouseEventArgs args, int labelId)
    {
        SelectedLabels.Remove(new Label() { Id = labelId });
    }

    async Task SelectedLabelChange(IEnumerable<int> selectedValues)
    {
        var labelDictionary = AllLabels.ToDictionary(row => row.Id);

        foreach (var id in selectedValues)
        {
            var checkbox = LabelCheckboxItems.Single(chk => chk.Value == id);
            var label = labelDictionary[id];
            await checkbox.SetParametersAsync(ParameterView.FromDictionary(new Dictionary<string, object>()
            {
                {  "Style", $"background-color:{label.BackColor};color:{label.TextColor}" }
            }));
        }

        foreach (var kp in labelDictionary.Where(kp => !selectedValues.Contains(kp.Key)))
        {
            var checkbox = LabelCheckboxItems.Single(chk => chk.Value == kp.Key);
            await checkbox.SetParametersAsync(ParameterView.FromDictionary(new Dictionary<string, object>()
            {
                {  "Style", $"background-color:auto;color:auto" }
            }));
        }
    }
}
