@page "/WorkItem"
@inject Data Data

<ErrorMessage @ref="error"/>

<div class="alert alert-info">
    @if (WorkItemRecord.Number == 0)
    {
        <span>New work item</span>
    }
    else
    {
        <span>@WorkItemRecord.Number</span>
    }
</div>

<EditForm Model="WorkItemRecord" OnSubmit="WorkItemOnSubmit">
    <div class="row">    
        <label>Folder:</label>
        <RadzenDropDown TValue="int" @bind-Value="WorkItemRecord.FolderId" Data="Folders" TextProperty="Value" ValueProperty="Key"/>    
    </div>

    <div class="row">
        <label>Title:</label>
        <RadzenTextBox @bind-Value="WorkItemRecord.Title"/>
    </div>

    <div class="row">
        <label>Iteration:</label>
        <RadzenDropDown TValue="int" @bind-Value="WorkItemRecord.Iteration" Data="Iterations" TextProperty="Value" ValueProperty="Key"/>        
    </div>

    <div class="row">
        <label>Labels:</label>
        <RadzenCheckBoxList TValue="int" Orientation="Orientation.Horizontal" Change="@(value => SelectedLabelChange(value))" @ref="LabelOptions" @bind-Value="WorkItemRecord.SelectedLabels">
            <Items>                           
                @foreach (var lbl in AllLabels)
                {                                        
                    <RadzenCheckBoxListItem Value="lbl.Id" Text="@lbl.Name" @ref="AddCheckboxRef"/>                    
                }
            </Items>
        </RadzenCheckBoxList>
    </div>

    <RadzenButton ButtonType="ButtonType.Submit" Text="Save Work Item"/>

    <RadzenButton Click="NewWorkItem" Text="New Work Item"/>
</EditForm>


@code {        
        ErrorMessage error;
        int WorkspaceId;
        Models.WorkItem WorkItemRecord = new Models.WorkItem();
        IEnumerable<KeyValuePair<int, string>> Folders;
        IEnumerable<KeyValuePair<int, string>> Iterations;        
        IEnumerable<Label> AllLabels = Enumerable.Empty<Label>();
        RadzenCheckBoxList<int> LabelOptions;
        List<RadzenCheckBoxListItem<int>> LabelCheckboxItems = new List<RadzenCheckBoxListItem<int>>();

        // thanks to https://stackoverflow.com/a/60083369/2023653
        RadzenCheckBoxListItem<int> AddCheckboxRef { set { LabelCheckboxItems.Add(value); } }

        async Task WorkItemOnSubmit() => await Data.SaveAsync(WorkItemRecord, error);

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        WorkspaceId = await Data.GetWorkspaceIdAsync();
        WorkItemRecord.WorkspaceId = WorkspaceId;
        Folders = await Data.QuerySelectListAsync<FolderSelect>(q => q.WorkspaceId = WorkspaceId);
        Iterations = await Data.GetIterationsAsync();        
        AllLabels = await Data.QueryAsync(new MyLabels() { WorkspaceId = WorkspaceId, IsActive = true });
    }

    async Task SelectedLabelChange(IEnumerable<int> selectedValues)
    {
        var labelDictionary = AllLabels.ToDictionary(row => row.Id);

        foreach (var id in selectedValues)
        {
            var checkbox = LabelCheckboxItems.Single(chk => chk.Value == id);
            var label = labelDictionary[id];
            await checkbox.SetParametersAsync(ParameterView.FromDictionary(new Dictionary<string, object>()
            {
                { "Style", $"background-color:{label.BackColor};color:{label.TextColor}" }
            }));
        }

        foreach (var kp in labelDictionary.Where(kp => !selectedValues.Contains(kp.Key)))
        {
            var checkbox = LabelCheckboxItems.Single(chk => chk.Value == kp.Key);
            await checkbox.SetParametersAsync(ParameterView.FromDictionary(new Dictionary<string, object>()
            {
                { "Style", $"background-color:auto;color:auto" }
            }));
        }
    }

    void NewWorkItem()
    {
        LabelCheckboxItems.Clear(); // prevents redundant items in checkbox item list
        WorkItemRecord = new Models.WorkItem() { WorkspaceId = WorkspaceId };
    }
}
