@page "/profile"
@inject TimeZoneListing TimeZones
@inject Data Data
@inject AuthenticationStateProvider AuthenticationStateProvider

@if (CurrentUser != null)
{
    <EditForm Model="@CurrentUser" OnSubmit="SubmitForm">

        <div class="form-group">
            <label>Display Name:</label>
            <InputText @bind-Value="CurrentUser.DisplayName" class="form-control"/>
        </div>
        
        <div class="form-group">
            <label>Time Zone:</label>
            <InputSelect @bind-Value="CurrentUser.TimeZoneId" class="form-control">
                @foreach (var item in TimeZones.GetTimeZoneItems())
                {
                    <option value="@item.Value">@item.Text</option>
                }
            </InputSelect>
        </div>

        <div class="form-group">
            <label>Local Time:</label>
            @CurrentUser.LocalTime
        </div>

        <div class="form-group">
            <label>Current Workspace:</label>
            <InputSelectNumber @bind-Value="CurrentUser.WorkspaceId" class="form-control">
                <option value="">(none)</option>
                @foreach (var item in MyWorkspaces)
                {
                    <option value="@item.Id">@item.Name</option>
                }
            </InputSelectNumber>
        </div>

        <button class="btn btn-primary">Save</button>
    </EditForm>
}

<EditForm Model="@CreateWorkspace" OnSubmit="CreateWorkspaceSubmit">
    <div class="form-group">
        <label>Create Workspace Name:</label>
        <InputText @bind-Value="CreateWorkspace.Name" class="form-control" required="required"/>
    </div>

    <button class="btn btn-primary">Create Workspace</button>
</EditForm>


@code {
    private UserProfile CurrentUser { get; set; }
    private IEnumerable<Workspace> MyWorkspaces { get; set; }
    private Workspace CreateWorkspace { get; set; } = new Workspace();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        CurrentUser = await Data.GetUserProfile();
        MyWorkspaces = await Data.GetMyWorkspaces();
    }

    async Task SubmitForm()
    {
        await Data.UpdateUserProfile(CurrentUser);
    }

    async Task CreateWorkspaceSubmit()
    {
        CreateWorkspace.OwnerUserId = CurrentUser.UserId;
        await Data.SaveAsync(CreateWorkspace, user: CurrentUser);
    }
}