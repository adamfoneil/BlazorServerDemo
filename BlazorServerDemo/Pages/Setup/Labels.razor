@page "/setup/labels"
@inject Data Data 

<h3>Labels</h3>
<p>Use labels to categorize work items, for example as <strong>bugs</strong> or <strong>enhancements</strong>.</p>

<table class="table">
    <tr>
        <th>Label Name</th>
        <th>Back Color</th>
        <th>Text Color</th>
        <th>Preview</th>
        <th></th>
    </tr>
    @foreach (var item in AllLabels)
    {
        <tr>
            <td>@item.Name</td>
            <td></td>
            <td></td>
            <td><span class="badge" style="background-color:@item.BackColor;color:@item.TextColor">@item.Name</span></td>
            <td></td>
        </tr>
    }
</table>

<EditForm Model="CreateLabel" class="form-inline" OnSubmit="CreateLabelSubmit">
    <div class="form-group">
        <label>Create Label:</label>
        <InputText @bind-Value="CreateLabel.Name" class="form-control" required="required"/>
    </div>

    <div class="form-group">
        <label>Background Color:</label>
        <InputText @bind-Value="CreateLabel.BackColor" class="form-control" required="required"/>
    </div>

    <div class="form-group">
        <label>Text Color:</label>
        <InputText @bind-Value="CreateLabel.TextColor" class="form-control" required="required"/>
    </div>

    <div class="form-group">
        <label>Preview:</label>
        <span class="badge" style="background-color:@CreateLabel.BackColor;color:@CreateLabel.TextColor">@CreateLabel.Name</span>
    </div>

    <button class="btn btn-dark">Create Label</button>
</EditForm>

@code {
    [Parameter]
    public bool? IsActive { get; set; }

    public Label CreateLabel { get; set; } = new Label();

    protected IEnumerable<Label> AllLabels { get; set; } = Enumerable.Empty<Label>();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        using (var cn = Data.GetConnection())
        {
            CreateLabel = new Label() { WorkspaceId = await Data.GetWorkspaceIdAsync() };            
        }

        await RefreshListAsync();
    }

    async Task CreateLabelSubmit()
    {
        await Data.SaveAsync(CreateLabel);
        await RefreshListAsync();
    }

    async Task RefreshListAsync()
    {
        using (var cn = Data.GetConnection())
        {
            AllLabels = await new MyLabels()
            {
                WorkspaceId = await Data.GetWorkspaceIdAsync(),
                IsActive = IsActive ?? true
            }.ExecuteAsync(cn);
        }
    }
}
