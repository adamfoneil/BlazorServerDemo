@page "/setup/labels"
@inject Data Data 

<h3>Labels</h3>
<p>Use labels to categorize work items, for example as <strong>bugs</strong> or <strong>enhancements</strong>.</p>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">@ErrorMessage</div>
}

<label>
    Show items
    <select name="IsActive" @onchange="(e) => ShowActiveOnChange(e)" class="form-control">
        <option value="true">Active</option>
        <option value="false">Inactive</option>
    </select>    
</label>

<RadzenGrid Data="@AllLabels" TItem="Label" @ref="LabelGrid" RowUpdate="OnRowUpdate">
    <Columns>
        <RadzenGridColumn Property="Name" TItem="Label">
            <EditTemplate Context="label">
                <RadzenTextBox @bind-Value="label.Name" class="form-control"/>
            </EditTemplate>
        </RadzenGridColumn>
        <RadzenGridColumn Property="BackColor" TItem="Label">
            <EditTemplate Context="label">
                <RadzenTextBox @bind-Value="label.BackColor" class="form-control"/>
            </EditTemplate>
        </RadzenGridColumn>
        <RadzenGridColumn Property="TextColor" TItem="Label">
            <EditTemplate Context="label">
                <RadzenTextBox @bind-Value="label.TextColor" class="form-control"/>
            </EditTemplate>
        </RadzenGridColumn>
        <RadzenGridColumn Property="IsActive" Title="Active" TItem="Label">
            <EditTemplate Context="label">
                <RadzenCheckBox @bind-Value="label.IsActive"/>
            </EditTemplate>            
        </RadzenGridColumn>
        <RadzenGridColumn TItem="Label">
            <Template Context="label">
                <RadzenButton Icon="edit" Click="@(args => EditRow(label))"/>
                <RadzenButton Icon="delete" Click="@(args => DeleteRow(label))"/>
            </Template>
            <EditTemplate Context="label">
                <RadzenButton Icon="save" Click="@((args) => SaveRow(label))"/>
                <RadzenButton Icon="cancel" Click="@((args) => CancelEdit(label))"/>                    
            </EditTemplate>
        </RadzenGridColumn>
    </Columns>
</RadzenGrid>


<EditForm Model="CreateLabel" OnSubmit="CreateLabelSubmit">
    <div class="row">
        <div class="form-group">
            <label>Create Label:</label>
            <InputText @bind-Value="CreateLabel.Name" class="form-control" required="required"/>
        </div>

        <div class="form-group">
            <label>Background Color:</label>
            <InputText @bind-Value="CreateLabel.BackColor" class="form-control" required="required"/>
        </div>

        <div class="form-group">
            <label>Text Color:</label>
            <InputText @bind-Value="CreateLabel.TextColor" class="form-control" required="required"/>
        </div>

        <div class="form-group">
            <label>Preview:</label>
            <span class="badge" style="background-color:@CreateLabel.BackColor;color:@CreateLabel.TextColor">@CreateLabel.Name</span>
        </div>        
    </div>
    <div class="row">
        <button class="btn btn-dark">Create Label</button>
    </div>
</EditForm>

@code {
    RadzenGrid<Label> LabelGrid;

    string ErrorMessage;

    bool? IsActive;

    Label CreateLabel = new Label();

    IEnumerable<Label> AllLabels { get; set; } = Enumerable.Empty<Label>();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        CreateLabel = new Label() { WorkspaceId = await Data.GetWorkspaceIdAsync() };

        await RefreshListAsync();
    }

    async Task CreateLabelSubmit()
    {
        var result = await Data.TrySaveAsync(CreateLabel);
        if (result.IsSuccessful)
        {
            CreateLabel = new Label() { WorkspaceId = await Data.GetWorkspaceIdAsync() };
            await RefreshListAsync();
        }
        else
        {
            ErrorMessage = result.Exception.Message;
        }
    }

    async Task ShowActiveOnChange(ChangeEventArgs e)
    {
        IsActive = bool.Parse(e.Value.ToString());
        await RefreshListAsync();
    }

    async Task RefreshListAsync()
    {
        AllLabels = await Data.QueryAsync(new MyLabels()
        {
            WorkspaceId = await Data.GetWorkspaceIdAsync(),
            IsActive = IsActive ?? true
        });
    }

    void EditRow(Label label) => LabelGrid.EditRow(label);

    void SaveRow(Label label) => LabelGrid.UpdateRow(label);

    async Task DeleteRow(Label label)
    {
        await Data.DeleteAsync<Label>(label.Id);
        LabelGrid.Reload();
    }

    void CancelEdit(Label label) => LabelGrid.CancelEditRow(label);

    async Task OnRowUpdate(Label label) => await Data.SaveAsync(label);

    async Task DeleteLabel(int id)
    {
        ErrorMessage = null;

        var result = await Data.TryDeleteAsync<Label>(id);
        if (result.IsSuccessful)
        {
            await RefreshListAsync();
        }
        else
        {
            ErrorMessage = result.Exception.Message;
        }
    }
}
