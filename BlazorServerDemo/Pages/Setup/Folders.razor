@page "/setup/folders"
@inject Data Data 

<h3>Folders</h3>
<p>Use folders to group your work items in ways that make sense to your organization.</p>
<p>A typical hierarchy might be <strong>Teams</strong> / <strong>Applications</strong> / <strong>Projects</strong></p>

<ErrorMessage @ref="error"/>

@if (AllFolders != null)
{
    var root = GetRoot();
    <RadzenTree Data="AllFolders" Expand="@(args => OnExpand(args))" @ref="tree">
        <RadzenTreeItem Value="@root" Text="@root.Name" HasChildren="@HasChildren(root)"/>
    </RadzenTree>
    
    <RadzenGrid Data="AllFolders" @ref="folderGrid" RowUpdate="OnRowUpdate" TItem="MyFolderTreeResult">
        <Columns>
            <RadzenGridColumn TItem="MyFolderTreeResult" Property="FullPath">
                <HeaderTemplate>
                    Folder Path
                </HeaderTemplate>
                <EditTemplate Context="folder">
                    <RadzenTextBox @bind-Value="folder.Name" />
                </EditTemplate>
            </RadzenGridColumn>
            <RadzenGridColumn TItem="MyFolderTreeResult">
                <HeaderTemplate>
                    Open Work Items
                </HeaderTemplate>
                <Template Context="folder">
                    @WorkItemCounts[folder.Id].OpenCount
                </Template>
            </RadzenGridColumn>
            <RadzenGridColumn TItem="MyFolderTreeResult">
                <HeaderTemplate>
                    Closed Work Items
                </HeaderTemplate>
                <Template Context="folder">
                    @WorkItemCounts[folder.Id].ClosedCount
                </Template>
            </RadzenGridColumn>
            <RadzenGridColumn TItem="MyFolderTreeResult">
                <Template Context="folder">
                    @if (folder.Id > 0)
                    {
                        <RadzenButton ButtonStyle="ButtonStyle.Primary" Icon="edit" Click="@(args => folderGrid.EditRow(folder))"/>
                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Click="@(args => DeleteRow(folder))"/>
                    }
                </Template>
                <EditTemplate Context="folder">
                    <RadzenButton ButtonStyle="ButtonStyle.Primary" Icon="save" Click="@((args) => folderGrid.UpdateRow(folder))"/>
                    <RadzenButton ButtonStyle="ButtonStyle.Primary" Icon="cancel" Click="@((args) => folderGrid.CancelEditRow(folder))"/>                    
                </EditTemplate>
            </RadzenGridColumn>
        </Columns>
    </RadzenGrid>
}

<EditForm Model="createFolder" OnSubmit="CreateFolderSubmit">
    <div class="row">
        <div class="form-group">
            <label>Create Folder:</label>
            <InputText @bind-Value="createFolder.FullPath" class="form-control" required="required" placeholder="folder path"/>                
        </div>
    </div>
    <div class="row">
        <button class="btn btn-dark">Create Folder</button>
    </div>
</EditForm>

@code {
    List<MyFolderTreeResult> AllFolders;
    Dictionary<int, CountWorkItemsByFolderResult> WorkItemCounts;
    RadzenGrid<MyFolderTreeResult> folderGrid;
    ErrorMessage error;
    FolderForm createFolder = new FolderForm();
    RadzenTree tree;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await RefreshListAsync();
    }

    async Task RefreshListAsync()
    {
        var wsId = await Data.GetWorkspaceIdAsync();

        AllFolders = (await Data.QueryAsync(new MyFolderTree()
        {
            WorkspaceId = wsId
        })).ToList();

        using (var cn = Data.GetConnection())
        {
            WorkItemCounts = await new CountWorkItemsByFolder() { WorkspaceId = wsId }.ExecuteDictionaryAsync(cn);
            WorkItemCounts.Add(wsId * -1, new CountWorkItemsByFolderResult()
            {
                OpenCount = WorkItemCounts.Sum(item => item.Value.OpenCount),
                ClosedCount = WorkItemCounts.Sum(item => item.Value.ClosedCount)
            });
        }
    }

    async Task CreateFolderSubmit()
    {
        await MergeFolderPathAsync(createFolder.FullPath);
        await RefreshListAsync();
    }

    async Task OnRowUpdate(MyFolderTreeResult row)
    {
        await Data.SaveAsync(row.ToFolder(),
            (exc) => error.Message = exc.Message,
            async () => await RefreshListAsync());
    }

    async Task MergeFolderPathAsync(string fullPath)
    {
        var folderNames = fullPath
            .Split(new char[] { '/', '\\', '.' }, StringSplitOptions.RemoveEmptyEntries)
            .Select(s => s.Trim());

        int parentId = (await Data.GetWorkspaceIdAsync()) * -1;
        using (var cn = Data.GetConnection())
        {
            foreach (var name in folderNames)
            {
                int folderId = await Data.MergeAsync(new Folder()
                {
                    ParentId = parentId,
                    Name = name
                });

                parentId = folderId;
            }
        }
    }

    async Task DeleteRow(MyFolderTreeResult row) => await Data.DeleteAsync(row.ToFolder(),
        (exc) => error.Message = exc.Message,
        (row) =>
        {
            AllFolders.Remove(GetMyFolderTreeResult(row));
            foreach (var id in row.ChildFolderIds)
            {
                AllFolders.Remove(new MyFolderTreeResult() { Id = id });
            }
        });

    MyFolderTreeResult GetRoot() => AllFolders.Single(f => f.Id < 0);

    MyFolderTreeResult GetMyFolderTreeResult(Folder folder) => new MyFolderTreeResult()
    {
        ParentId = folder.ParentId,
        Name = folder.Name,
        Id = folder.Id
    };

    bool HasChildren(MyFolderTreeResult folder) => AllFolders.Any(f => f.ParentId == folder.Id);

    void OnExpand(TreeExpandEventArgs args)
    {
        var folder = args.Value as MyFolderTreeResult;
        args.Children.Data = AllFolders.Where(f => f.ParentId == folder.Id);
        args.Children.TextProperty = "Name";
        args.Children.HasChildren = (item) => AllFolders.Any(f => f.ParentId == (item as MyFolderTreeResult).Id);
        args.Children.Template = FolderTemplate;
    }

    RenderFragment<RadzenTreeItem> FolderTemplate = (context) => builder =>
    {
        var folder = context.Value as MyFolderTreeResult;
        builder.AddContent(1, folder.Name);
    };

    class FolderForm
    {
        public string FullPath { get; set; }
    }
}
